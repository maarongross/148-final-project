##Color Segmentation:
image = cv2.imread('') #put in cone image
# cv2.imshow('input',image2)

lane_image_2 = np.copy(image2)
print(lane_image_2.shape)
# lane_image_2 = cv2.cvtColor(lane_image_2,cv2.COLOR_BGR2RGB)
lane_image_2 =cv2.cvtColor(lane_image_2,cv2.COLOR_BGR2HSV)
# show_image('input',lane_image_2)
# show_image('hsv_input',lane_image_2)
print("DISPLAY")
plt.imshow(lane_image_2)
plt.show()

#Defining upper and lower boundaries for blue color
lower_blue_hls = np.uint8([  255, 0,   0])
upper_blue_hls = np.uint8([255, 250, 0])
# #Using bitwise operators to segment out blue colors
lane_blue_mask = cv2.inRange(lane_image_2,lower_blue_hls,upper_blue_hls)
show_image('bluemask',lane_blue_mask)
kernel = np.ones((15,15),np.uint8)
lane_image_2 = cv2.morphologyEx(lane_blue_mask, cv2.MORPH_CLOSE, kernel)
kerenel_dilate = np.ones((7,7),np.uint8)
lane_image_3 = cv2.dilate(lane_image_2,kerenel_dilate,iterations = 1)

#Defining upper and lower boundaries for green color
lower_green_hls = np.uint8([  0, 255,   0])
upper_green_hls = np.uint8([255, 255, 0])
# #Using bitwise operators to segment out green colors
lane_green_mask = cv2.inRange(lane_image_2,lower_green_hls,upper_green_hls)
show_image('greenmask',lane_green_mask)
kernel = np.ones((15,15),np.uint8)
lane_image_4 = cv2.morphologyEx(lane_green_mask, cv2.MORPH_CLOSE, kernel)
kerenel_dilate = np.ones((7,7),np.uint8)
lane_image_5 = cv2.dilate(lane_image_2,kerenel_dilate,iterations = 1)

show_image('closing',lane_image_2)
show_image('withdilation', lane_image_3)
lane_image_mask = cv2.bitwise_and(lane_image_2,lane_image_2,mask=lane_white_mask)
show_image('bitmask',lane_image_mask)
#Implementing Canny and Hough
# lane_canny_2 = find_canny(lane_image_mask,50,200)
# show_image('canny',lane_canny_2)
# lane_roi_2 = region_of_interest(lane_canny_2)
# lane_lines_2 = cv2.HoughLinesP(lane_roi_2,1,np.pi/180,50,40,5)
# lane_lines_plotted_2 = draw_lines(lane_image_2,lane_lines_2)
# show_image('lines',lane_lines_plotted_2)
# result_lines_2 = compute_average_lines(lane_image_2,lane_lines_2)
# final_lines_mask_2 = draw_lines(lane_image_2,result_lines_2)
# show_image('final',final_lines_mask_2)

#Plotting the final lines on main image
# for points in result_lines_2:

# ###******************************************************************************#####

# # #Video Processing:
# cap = cv2.VideoCapture("test1.mp4")
# if not cap.isOpened:
#     print('Error opening video capture')
#     exit(0)
# cap.set(5,20)
# while True:
    
#     ret, frame = cap.read()
#     if frame is None:
#         print(' No captured frame -- Break!')
#         break
#     lane_image_2 = np.copy(frame)
#     lane_image_2 =cv2.cvtColor(lane_image_2,cv2.COLOR_BGR2HLS)
#     # show_image('hsv_input',lane_image_2)
#     lower_white_hls = np.uint8([  0, 200,   0])
#     upper_white_hls = np.uint8([255, 255, 255])
#     lane_white_mask = cv2.inRange(lane_image_2,lower_white_hls,upper_white_hls)
#     # show_image('whitemask',lane_white_mask)
#     lane_image_mask = cv2.bitwise_and(lane_image_2,lane_image_2,mask=lane_white_mask)
    # show_image('bitmask',lane_image_mask)
    # lane_canny_2 = find_canny(lane_image_mask,50,150)
    # lane_roi_2 = region_of_interest(lane_canny_2)
    # # show_image('canny',lane_roi_2)
    # # lane_lines_2 = cv2.HoughLinesP(lane_roi_2,1,np.pi/180,15,5,15)
    # # lane_lines_plotted_2 = draw_lines(lane_image_2,lane_lines_2)
    # # show_image('lines',lane_lines_plotted_2)
    # result_lines_2 = compute_average_lines(lane_image_2,lane_lines_2)
    # final_lines_mask_2 = draw_lines(lane_image_2,result_lines_2)
    # # show_image('final',final_lines_mask_2)

    # for points in result_lines_2:
    #     x1,y1,x2,y2 = points[0]
    #     cv2.line(frame,(x1,y1),(x2,y2),(0,0,255),2)

    # show_image('output',frame)

# ####****************************************************************###
##Contour Detection:

# image2 = cv2.imread('solidWhiteRight.jpg')
# lane_image_2 = np.copy(image2)
# print(lane_image_2.shape)
# # lane_image_2 = cv2.cvtColor(lane_image_2,cv2.COLOR_BGR2RGB)
# lane_image_2 =cv2.cvtColor(lane_image_2,cv2.COLOR_BGR2HLS)
# show_image('hsv_input',lane_image_2)
# lower_white_hls = np.uint8([  0, 170,   0])
# upper_white_hls = np.uint8([5, 230, 255])
# lane_white_mask = cv2.inRange(lane_image_2,lower_white_hls,upper_white_hls)
# show_image('whitemask',lane_white_mask)
# lane_image_mask = cv2.bitwise_and(lane_image_2,lane_image_2,mask=lane_white_mask)
# show_image('bitmask',lane_image_mask)
# lane_roi_2 = region_of_interest(lane_image_mask)
# show_image('roi',lane_roi_2)
# lane_roi_gray = cv2.cvtColor(lane_image_mask,cv2.COLOR_BGR2GRAY)
# show_image('gray_contour',lane_roi_gray)
contours,heirarchy = cv2.findContours(lane_image_mask,1,cv2.CHAIN_APPROX_SIMPLE)

for cnt in contours:
    cv2.drawContours(image2,cnt,-1,(0,255,3),3)

show_image('contour',image2)

# # print(dir(contours[0]))
